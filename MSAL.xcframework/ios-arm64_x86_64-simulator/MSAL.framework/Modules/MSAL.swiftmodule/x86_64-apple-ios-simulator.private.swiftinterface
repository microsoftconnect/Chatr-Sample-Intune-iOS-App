// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MSAL
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import MSAL
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @objc public class MSALNativeAuthRequiredAttribute : ObjectiveC.NSObject {
  final public let name: Swift.String
  final public let type: Swift.String
  final public let required: Swift.Bool
  final public let regex: Swift.String?
  @objc deinit
}
@objc public protocol MFARequestChallengeDelegate {
  @objc @_Concurrency.MainActor func onMFARequestChallengeError(error: MSAL.MFARequestChallengeError, newState: MSAL.MFARequiredState?)
  @_Concurrency.MainActor @objc optional func onMFARequestChallengeVerificationRequired(newState: MSAL.MFARequiredState, sentTo: Swift.String, channelTargetType: MSAL.MSALNativeAuthChannelType, codeLength: Swift.Int)
  @_Concurrency.MainActor @objc optional func onMFARequestChallengeSelectionRequired(authMethods: [MSAL.MSALAuthMethod], newState: MSAL.MFARequiredState)
}
@objc public protocol MFAGetAuthMethodsDelegate {
  @objc @_Concurrency.MainActor func onMFAGetAuthMethodsError(error: MSAL.MFAGetAuthMethodsError, newState: MSAL.MFARequiredState?)
  @_Concurrency.MainActor @objc optional func onMFAGetAuthMethodsSelectionRequired(authMethods: [MSAL.MSALAuthMethod], newState: MSAL.MFARequiredState)
}
@objc public protocol MFASubmitChallengeDelegate {
  @objc @_Concurrency.MainActor func onMFASubmitChallengeError(error: MSAL.MFASubmitChallengeError, newState: MSAL.MFARequiredState?)
  @_Concurrency.MainActor @objc optional func onSignInCompleted(result: MSAL.MSALNativeAuthUserAccountResult)
}
@objc public protocol SignInAfterSignUpDelegate {
  @objc @_Concurrency.MainActor func onSignInAfterSignUpError(error: MSAL.SignInAfterSignUpError)
  @_Concurrency.MainActor @objc optional func onSignInCompleted(result: MSAL.MSALNativeAuthUserAccountResult)
}
@objc public protocol ResetPasswordStartDelegate {
  @objc @_Concurrency.MainActor func onResetPasswordStartError(error: MSAL.ResetPasswordStartError)
  @_Concurrency.MainActor @objc optional func onResetPasswordCodeRequired(newState: MSAL.ResetPasswordCodeRequiredState, sentTo: Swift.String, channelTargetType: MSAL.MSALNativeAuthChannelType, codeLength: Swift.Int)
}
@objc public protocol ResetPasswordVerifyCodeDelegate {
  @objc @_Concurrency.MainActor func onResetPasswordVerifyCodeError(error: MSAL.VerifyCodeError, newState: MSAL.ResetPasswordCodeRequiredState?)
  @_Concurrency.MainActor @objc optional func onPasswordRequired(newState: MSAL.ResetPasswordRequiredState)
}
@objc public protocol ResetPasswordResendCodeDelegate {
  @objc @_Concurrency.MainActor func onResetPasswordResendCodeError(error: MSAL.ResendCodeError, newState: MSAL.ResetPasswordCodeRequiredState?)
  @_Concurrency.MainActor @objc optional func onResetPasswordResendCodeRequired(newState: MSAL.ResetPasswordCodeRequiredState, sentTo: Swift.String, channelTargetType: MSAL.MSALNativeAuthChannelType, codeLength: Swift.Int)
}
@objc public protocol ResetPasswordRequiredDelegate {
  @objc @_Concurrency.MainActor func onResetPasswordRequiredError(error: MSAL.PasswordRequiredError, newState: MSAL.ResetPasswordRequiredState?)
  @_Concurrency.MainActor @objc optional func onResetPasswordCompleted(newState: MSAL.SignInAfterResetPasswordState)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SignInBaseState : MSAL.MSALNativeAuthBaseState {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SignInCodeRequiredState : MSAL.SignInBaseState {
  @objc public func resendCode(delegate: any MSAL.SignInResendCodeDelegate)
  @objc public func submitCode(code: Swift.String, delegate: any MSAL.SignInVerifyCodeDelegate)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SignInPasswordRequiredState : MSAL.SignInBaseState {
  @objc public func submitPassword(password: Swift.String, delegate: any MSAL.SignInPasswordRequiredDelegate)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MSALAuthMethod : ObjectiveC.NSObject {
  final public let id: Swift.String
  final public let challengeType: Swift.String
  final public let loginHint: Swift.String
  final public let channelTargetType: MSAL.MSALNativeAuthChannelType
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class RetrieveAccessTokenError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc public var isBrowserRequired: Swift.Bool {
    @objc get
  }
  @objc public var isRefreshTokenExpired: Swift.Bool {
    @objc get
  }
  @objc public var isInvalidScope: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MSALNativeAuthUserAccountResult : ObjectiveC.NSObject {
  @objc public var account: MSAL.MSALAccount
  @objc public var idToken: Swift.String? {
    @objc get
  }
  @objc public func signOut()
  @objc public func getAccessToken(parameters: MSAL.MSALNativeAuthGetAccessTokenParameters, delegate: any MSAL.CredentialsDelegate)
  @available(*, deprecated, message: "This method is now deprecated. Use the method 'getAccessToken(parameters:)' instead.")
  @objc public func getAccessToken(forceRefresh: Swift.Bool = false, correlationId: Foundation.UUID? = nil, delegate: any MSAL.CredentialsDelegate)
  @available(*, deprecated, message: "This method is now deprecated. Use the method 'getAccessToken(parameters:)' instead.")
  public func getAccessToken(scopes: [Swift.String], forceRefresh: Swift.Bool = false, correlationId: Foundation.UUID? = nil, delegate: any MSAL.CredentialsDelegate)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SignInAfterResetPasswordState : MSAL.SignInAfterPreviousFlowBaseState {
  @objc public func signIn(parameters: MSAL.MSALNativeAuthSignInAfterResetPasswordParameters, delegate: any MSAL.SignInAfterResetPasswordDelegate)
  @objc @available(*, deprecated, message: "This method is now deprecated. Use the method 'signIn(parameters:)' instead.")
  public func signIn(scopes: [Swift.String]? = nil, delegate: any MSAL.SignInAfterResetPasswordDelegate)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class MFARequestChallengeError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc public var isBrowserRequired: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc public protocol SignInStartDelegate {
  @objc @_Concurrency.MainActor func onSignInStartError(error: MSAL.SignInStartError)
  @_Concurrency.MainActor @objc optional func onSignInCodeRequired(newState: MSAL.SignInCodeRequiredState, sentTo: Swift.String, channelTargetType: MSAL.MSALNativeAuthChannelType, codeLength: Swift.Int)
  @_Concurrency.MainActor @objc optional func onSignInPasswordRequired(newState: MSAL.SignInPasswordRequiredState)
  @_Concurrency.MainActor @objc optional func onSignInAwaitingMFA(newState: MSAL.AwaitingMFAState)
  @_Concurrency.MainActor @objc optional func onSignInCompleted(result: MSAL.MSALNativeAuthUserAccountResult)
}
@objc public protocol SignInPasswordRequiredDelegate {
  @objc @_Concurrency.MainActor func onSignInPasswordRequiredError(error: MSAL.PasswordRequiredError, newState: MSAL.SignInPasswordRequiredState?)
  @_Concurrency.MainActor @objc optional func onSignInAwaitingMFA(newState: MSAL.AwaitingMFAState)
  @_Concurrency.MainActor @objc optional func onSignInCompleted(result: MSAL.MSALNativeAuthUserAccountResult)
}
@objc public protocol SignInResendCodeDelegate {
  @objc @_Concurrency.MainActor func onSignInResendCodeError(error: MSAL.ResendCodeError, newState: MSAL.SignInCodeRequiredState?)
  @_Concurrency.MainActor @objc optional func onSignInResendCodeCodeRequired(newState: MSAL.SignInCodeRequiredState, sentTo: Swift.String, channelTargetType: MSAL.MSALNativeAuthChannelType, codeLength: Swift.Int)
}
@objc public protocol SignInVerifyCodeDelegate {
  @objc @_Concurrency.MainActor func onSignInVerifyCodeError(error: MSAL.VerifyCodeError, newState: MSAL.SignInCodeRequiredState?)
  @_Concurrency.MainActor @objc optional func onSignInCompleted(result: MSAL.MSALNativeAuthUserAccountResult)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ResetPasswordBaseState : MSAL.MSALNativeAuthBaseState {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class ResetPasswordCodeRequiredState : MSAL.ResetPasswordBaseState {
  @objc public func resendCode(delegate: any MSAL.ResetPasswordResendCodeDelegate)
  @objc public func submitCode(code: Swift.String, delegate: any MSAL.ResetPasswordVerifyCodeDelegate)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class ResetPasswordRequiredState : MSAL.ResetPasswordBaseState {
  @objc public func submitPassword(password: Swift.String, delegate: any MSAL.ResetPasswordRequiredDelegate)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class MSALNativeAuthError : ObjectiveC.NSObject, Foundation.LocalizedError {
  @objc public var errorDescription: Swift.String? {
    @objc get
  }
  @objc final public let correlationId: Foundation.UUID
  @objc final public let errorCodes: [Swift.Int]
  @objc final public let errorUri: Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class SignInAfterSignUpError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc public protocol CredentialsDelegate {
  @objc @_Concurrency.MainActor func onAccessTokenRetrieveError(error: MSAL.RetrieveAccessTokenError)
  @_Concurrency.MainActor @objc optional func onAccessTokenRetrieveCompleted(result: MSAL.MSALNativeAuthTokenResult)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class MFASubmitChallengeError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc public var isInvalidChallenge: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SignInStartError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc public var isBrowserRequired: Swift.Bool {
    @objc get
  }
  @objc public var isUserNotFound: Swift.Bool {
    @objc get
  }
  @objc public var isInvalidCredentials: Swift.Bool {
    @objc get
  }
  @objc public var isInvalidUsername: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AttributesRequiredError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MSALNativeAuthBaseState : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SignUpBaseState : MSAL.MSALNativeAuthBaseState {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SignUpCodeRequiredState : MSAL.SignUpBaseState {
  @objc public func resendCode(delegate: any MSAL.SignUpResendCodeDelegate)
  @objc public func submitCode(code: Swift.String, delegate: any MSAL.SignUpVerifyCodeDelegate)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SignUpPasswordRequiredState : MSAL.SignUpBaseState {
  @objc public func submitPassword(password: Swift.String, delegate: any MSAL.SignUpPasswordRequiredDelegate)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SignUpAttributesRequiredState : MSAL.SignUpBaseState {
  @objc public func submitAttributes(attributes: [Swift.String : Any], delegate: any MSAL.SignUpAttributesRequiredDelegate)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class SignInAfterResetPasswordError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class ResendCodeError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class MFAGetAuthMethodsError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc public var isBrowserRequired: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class PasswordRequiredError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc public var isBrowserRequired: Swift.Bool {
    @objc get
  }
  @objc public var isInvalidPassword: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class VerifyCodeError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc public var isBrowserRequired: Swift.Bool {
    @objc get
  }
  @objc public var isInvalidCode: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc public protocol SignInAfterResetPasswordDelegate {
  @objc @_Concurrency.MainActor func onSignInAfterResetPasswordError(error: MSAL.SignInAfterResetPasswordError)
  @_Concurrency.MainActor @objc optional func onSignInCompleted(result: MSAL.MSALNativeAuthUserAccountResult)
}
@objc public protocol SignUpStartDelegate {
  @objc @_Concurrency.MainActor func onSignUpStartError(error: MSAL.SignUpStartError)
  @_Concurrency.MainActor @objc optional func onSignUpCodeRequired(newState: MSAL.SignUpCodeRequiredState, sentTo: Swift.String, channelTargetType: MSAL.MSALNativeAuthChannelType, codeLength: Swift.Int)
  @_Concurrency.MainActor @objc optional func onSignUpAttributesInvalid(attributeNames: [Swift.String])
}
@objc public protocol SignUpVerifyCodeDelegate {
  @objc @_Concurrency.MainActor func onSignUpVerifyCodeError(error: MSAL.VerifyCodeError, newState: MSAL.SignUpCodeRequiredState?)
  @_Concurrency.MainActor @objc optional func onSignUpAttributesRequired(attributes: [MSAL.MSALNativeAuthRequiredAttribute], newState: MSAL.SignUpAttributesRequiredState)
  @_Concurrency.MainActor @objc optional func onSignUpPasswordRequired(newState: MSAL.SignUpPasswordRequiredState)
  @_Concurrency.MainActor @objc optional func onSignUpCompleted(newState: MSAL.SignInAfterSignUpState)
}
@objc public protocol SignUpResendCodeDelegate {
  @objc @_Concurrency.MainActor func onSignUpResendCodeError(error: MSAL.ResendCodeError, newState: MSAL.SignUpCodeRequiredState?)
  @_Concurrency.MainActor @objc optional func onSignUpResendCodeCodeRequired(newState: MSAL.SignUpCodeRequiredState, sentTo: Swift.String, channelTargetType: MSAL.MSALNativeAuthChannelType, codeLength: Swift.Int)
}
@objc public protocol SignUpPasswordRequiredDelegate {
  @objc @_Concurrency.MainActor func onSignUpPasswordRequiredError(error: MSAL.PasswordRequiredError, newState: MSAL.SignUpPasswordRequiredState?)
  @_Concurrency.MainActor @objc optional func onSignUpAttributesRequired(attributes: [MSAL.MSALNativeAuthRequiredAttribute], newState: MSAL.SignUpAttributesRequiredState)
  @_Concurrency.MainActor @objc optional func onSignUpCompleted(newState: MSAL.SignInAfterSignUpState)
}
@objc public protocol SignUpAttributesRequiredDelegate {
  @objc @_Concurrency.MainActor func onSignUpAttributesRequiredError(error: MSAL.AttributesRequiredError)
  @_Concurrency.MainActor @objc optional func onSignUpAttributesRequired(attributes: [MSAL.MSALNativeAuthRequiredAttribute], newState: MSAL.SignUpAttributesRequiredState)
  @_Concurrency.MainActor @objc optional func onSignUpAttributesInvalid(attributeNames: [Swift.String], newState: MSAL.SignUpAttributesRequiredState)
  @_Concurrency.MainActor @objc optional func onSignUpCompleted(newState: MSAL.SignInAfterSignUpState)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SignUpStartError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc public var isBrowserRequired: Swift.Bool {
    @objc get
  }
  @objc public var isUserAlreadyExists: Swift.Bool {
    @objc get
  }
  @objc public var isInvalidPassword: Swift.Bool {
    @objc get
  }
  @objc public var isInvalidUsername: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MSALNativeAuthTokenResult : ObjectiveC.NSObject {
  @objc public var accessToken: Swift.String {
    @objc get
  }
  @objc public var scopes: [Swift.String] {
    @objc get
  }
  @objc public var expiresOn: Foundation.Date? {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SignInAfterPreviousFlowBaseState : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SignInAfterSignUpState : MSAL.SignInAfterPreviousFlowBaseState {
  @objc public func signIn(parameters: MSAL.MSALNativeAuthSignInAfterSignUpParameters, delegate: any MSAL.SignInAfterSignUpDelegate)
  @objc @available(*, deprecated, message: "This method is now deprecated. Use the method 'signIn(parameters:)' instead.")
  public func signIn(scopes: [Swift.String]? = nil, delegate: any MSAL.SignInAfterSignUpDelegate)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ResetPasswordStartError : MSAL.MSALNativeAuthError {
  @objc override public var errorDescription: Swift.String? {
    @objc get
  }
  @objc public var isBrowserRequired: Swift.Bool {
    @objc get
  }
  @objc public var isUserDoesNotHavePassword: Swift.Bool {
    @objc get
  }
  @objc public var isUserNotFound: Swift.Bool {
    @objc get
  }
  @objc public var isInvalidUsername: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class MFABaseState : MSAL.MSALNativeAuthBaseState {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class AwaitingMFAState : MSAL.MFABaseState {
  @objc public func requestChallenge(delegate: any MSAL.MFARequestChallengeDelegate)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class MFARequiredState : MSAL.MFABaseState {
  @objc public func requestChallenge(authMethod: MSAL.MSALAuthMethod? = nil, delegate: any MSAL.MFARequestChallengeDelegate)
  @objc public func getAuthMethods(delegate: any MSAL.MFAGetAuthMethodsDelegate)
  @objc public func submitChallenge(challenge: Swift.String, delegate: any MSAL.MFASubmitChallengeDelegate)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class MSALNativeAuthPublicClientApplication : MSAL.MSALPublicClientApplication {
  @objc public init(configuration config: MSAL.MSALPublicClientApplicationConfig, challengeTypes: MSAL.MSALNativeAuthChallengeTypes) throws
  @objc public init(clientId: Swift.String, tenantSubdomain: Swift.String, challengeTypes: MSAL.MSALNativeAuthChallengeTypes, redirectUri: Swift.String? = nil) throws
  @objc final public func signUp(parameters: MSAL.MSALNativeAuthSignUpParameters, delegate: any MSAL.SignUpStartDelegate)
  @objc @available(*, deprecated, message: "This method is now deprecated. Use the method 'signUp(parameters:)' instead.")
  final public func signUp(username: Swift.String, password: Swift.String? = nil, attributes: [Swift.String : Any]? = nil, correlationId: Foundation.UUID? = nil, delegate: any MSAL.SignUpStartDelegate)
  @objc final public func signIn(parameters: MSAL.MSALNativeAuthSignInParameters, delegate: any MSAL.SignInStartDelegate)
  @objc @available(*, deprecated, message: "This method is now deprecated. Use the method 'signIn(parameters:)' instead.")
  final public func signIn(username: Swift.String, password: Swift.String? = nil, scopes: [Swift.String]? = nil, correlationId: Foundation.UUID? = nil, delegate: any MSAL.SignInStartDelegate)
  @objc final public func resetPassword(parameters: MSAL.MSALNativeAuthResetPasswordParameters, delegate: any MSAL.ResetPasswordStartDelegate)
  @objc @available(*, deprecated, message: "This method is now deprecated. Use the method 'resetPassword(parameters:)' instead.")
  final public func resetPassword(username: Swift.String, correlationId: Foundation.UUID? = nil, delegate: any MSAL.ResetPasswordStartDelegate)
  @objc final public func getNativeAuthUserAccount(correlationId: Foundation.UUID? = nil) -> MSAL.MSALNativeAuthUserAccountResult?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MSALNativeAuthGetAccessTokenParameters : ObjectiveC.NSObject {
  @objc public var forceRefresh: Swift.Bool
  @objc public var scopes: [Swift.String]?
  @objc public var correlationId: Foundation.UUID?
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MSALNativeAuthSignInParameters : ObjectiveC.NSObject {
  @objc public var username: Swift.String
  @objc public var password: Swift.String?
  @objc public var scopes: [Swift.String]?
  @objc public var claimsRequest: MSAL.MSALClaimsRequest?
  @objc public var correlationId: Foundation.UUID?
  @objc public init(username: Swift.String)
  @objc deinit
}
@objc @objcMembers public class MSALNativeAuthSignUpParameters : ObjectiveC.NSObject {
  @objc public var username: Swift.String
  @objc public var password: Swift.String?
  @objc public var attributes: [Swift.String : Any]?
  @objc public var correlationId: Foundation.UUID?
  @objc public init(username: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MSALNativeAuthSignInAfterSignUpParameters : ObjectiveC.NSObject {
  @objc public var scopes: [Swift.String]?
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MSALNativeAuthResetPasswordParameters : ObjectiveC.NSObject {
  @objc public var username: Swift.String
  @objc public var correlationId: Foundation.UUID?
  @objc public init(username: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MSALNativeAuthSignInAfterResetPasswordParameters : ObjectiveC.NSObject {
  @objc public var scopes: [Swift.String]?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class MSALNativeAuthChannelType : ObjectiveC.NSObject {
  @objc final public let value: Swift.String
  @objc public var isEmailType: Swift.Bool {
    @objc get
  }
  @objc public var isPhoneType: Swift.Bool {
    @objc get
  }
  @objc deinit
}
