#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef MSAL_SWIFT_H
#define MSAL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <MSAL/MSAL.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MSAL",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class NSUUID;

/// Class that defines the basic structure of a Native Auth error
SWIFT_CLASS("_TtC4MSAL19MSALNativeAuthError")
@interface MSALNativeAuthError : NSObject
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Correlation ID used for the request
@property (nonatomic, readonly, copy) NSUUID * _Nonnull correlationId;
/// Error codes returned along with the error
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull errorCodes;
/// Error uri that can be followed to get more information about the error returned by the server
@property (nonatomic, readonly, copy) NSString * _Nullable errorUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class that defines the structure and type of an Attributes Required error
SWIFT_CLASS("_TtC4MSAL23AttributesRequiredError")
@interface AttributesRequiredError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@end


/// Base class for Native Auth states
SWIFT_CLASS("_TtC4MSAL23MSALNativeAuthBaseState")
@interface MSALNativeAuthBaseState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Base class for MFA state
SWIFT_CLASS("_TtC4MSAL12MFABaseState")
@interface MFABaseState : MSALNativeAuthBaseState
@end

@protocol MFARequestChallengeDelegate;

/// An object of this type is created whenever a user needs to make a specific request to send the MFA challenge.
SWIFT_CLASS("_TtC4MSAL16AwaitingMFAState")
@interface AwaitingMFAState : MFABaseState
/// Requests the server to send the challenge to the default authentication method.
/// warning:
/// ⚠️  this API is experimental. It may be changed in the future without notice. Do not use in production applications.
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)requestChallengeWithDelegate:(id <MFARequestChallengeDelegate> _Nonnull)delegate;
@end

@class RetrieveAccessTokenError;
@class MSALNativeAuthTokenResult;

/// Protocol that defines the methods of a Credentials delegate
SWIFT_PROTOCOL("_TtP4MSAL19CredentialsDelegate_")
@protocol CredentialsDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onAccessTokenRetrieveErrorWithError:(RetrieveAccessTokenError * _Nonnull)error;
@optional
/// Notifies the delegate that the operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onAccessTokenRetrieveError(error:)</code> will be called.
/// \param result The access token result.
///
- (void)onAccessTokenRetrieveCompletedWithResult:(MSALNativeAuthTokenResult * _Nonnull)result;
@end



@class MFAGetAuthMethodsError;
@class MFARequiredState;
@class MSALAuthMethod;

/// Protocol that defines the methods of a MFAGetAuthMethodsDelegate delegate
SWIFT_PROTOCOL("_TtP4MSAL25MFAGetAuthMethodsDelegate_")
@protocol MFAGetAuthMethodsDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onMFAGetAuthMethodsErrorWithError:(MFAGetAuthMethodsError * _Nonnull)error newState:(MFARequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that the list of authentication methods is now available.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onMFAGetAuthMethodsError(error:)</code> will be called.
/// \param authMethods list of authentication method.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onMFAGetAuthMethodsSelectionRequiredWithAuthMethods:(NSArray<MSALAuthMethod *> * _Nonnull)authMethods newState:(MFARequiredState * _Nonnull)newState;
@end


/// Class that defines the structure and type of a MFAGetAuthMethodsError
SWIFT_CLASS("_TtC4MSAL22MFAGetAuthMethodsError")
@interface MFAGetAuthMethodsError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
@end

@class MFARequestChallengeError;
@class MSALNativeAuthChannelType;

/// Protocol that defines the methods of a MFARequestChallenge delegate
SWIFT_PROTOCOL("_TtP4MSAL27MFARequestChallengeDelegate_")
@protocol MFARequestChallengeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onMFARequestChallengeErrorWithError:(MFARequestChallengeError * _Nonnull)error newState:(MFARequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a verification is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onMFARequestChallengeError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onMFARequestChallengeVerificationRequiredWithNewState:(MFARequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
/// Notifies the delegate that the list of authentication methods is now available.
/// The user is required to choose an authentication method and then proceed with the “newState” to advance in the MFA process.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onMFARequestChallengeError(error:)</code> will be called.
/// \param authMethods list of authentication method
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onMFARequestChallengeSelectionRequiredWithAuthMethods:(NSArray<MSALAuthMethod *> * _Nonnull)authMethods newState:(MFARequiredState * _Nonnull)newState;
@end


/// Class that defines the structure and type of a MFARequestChallengeError
SWIFT_CLASS("_TtC4MSAL24MFARequestChallengeError")
@interface MFARequestChallengeError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
@end

@protocol MFASubmitChallengeDelegate;

SWIFT_CLASS("_TtC4MSAL16MFARequiredState")
@interface MFARequiredState : MFABaseState
/// Requests the server to send the challenge to the specified auth method or the default one.
/// warning:
/// ⚠️  this API is experimental. It may be changed in the future without notice. Do not use in production applications.
/// \param authMethod Optional. The authentication method you want to use for sending the challenge
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)requestChallengeWithAuthMethod:(MSALAuthMethod * _Nullable)authMethod delegate:(id <MFARequestChallengeDelegate> _Nonnull)delegate;
/// Requests the available MFA authentication methods.
/// warning:
/// ⚠️  this API is experimental. It may be changed in the future without notice. Do not use in production applications.
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)getAuthMethodsWithDelegate:(id <MFAGetAuthMethodsDelegate> _Nonnull)delegate;
/// Submits the MFA challenge to the server for verification.
/// warning:
/// ⚠️  this API is experimental. It may be changed in the future without notice. Do not use in production applications.
/// \param challenge Verification challenge that the user supplies.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitChallengeWithChallenge:(NSString * _Nonnull)challenge delegate:(id <MFASubmitChallengeDelegate> _Nonnull)delegate;
@end


@class MFASubmitChallengeError;
@class MSALNativeAuthUserAccountResult;

/// Protocol that defines the methods of a MFAGetAuthMethodsDelegate delegate
SWIFT_PROTOCOL("_TtP4MSAL26MFASubmitChallengeDelegate_")
@protocol MFASubmitChallengeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onMFASubmitChallengeErrorWithError:(MFASubmitChallengeError * _Nonnull)error newState:(MFARequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onMFASubmitChallengeError(error:newState:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end


/// Class that defines the structure and type of a MFASubmitChallengeError
SWIFT_CLASS("_TtC4MSAL23MFASubmitChallengeError")
@interface MFASubmitChallengeError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> when the challenge introduced is not valid.
@property (nonatomic, readonly) BOOL isInvalidChallenge;
@end


/// MSALAuthMethod represents a user’s authentication methods.
SWIFT_CLASS("_TtC4MSAL14MSALAuthMethod")
@interface MSALAuthMethod : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// The channel type via which a code was sent
SWIFT_CLASS("_TtC4MSAL25MSALNativeAuthChannelType")
@interface MSALNativeAuthChannelType : NSObject
/// Value of the channel used.
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/// Returns <code>true</code> if the channel is email.
@property (nonatomic, readonly) BOOL isEmailType;
/// Returns <code>true</code> if the channel is phone.
@property (nonatomic, readonly) BOOL isPhoneType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Encapsulates the parameters passed to the getAccessToken method of MSALNativeAuthUserAccountResult
SWIFT_CLASS("_TtC4MSAL38MSALNativeAuthGetAccessTokenParameters")
@interface MSALNativeAuthGetAccessTokenParameters : NSObject
/// Set to true to ignore any existing access token in the cache and force MSAL to get a new access token from the service.
@property (nonatomic) BOOL forceRefresh;
/// Permissions you want included in the access token received.
/// Not all scopes are guaranteed to be included in the access token returned.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable scopes;
/// UUID to correlate this request with the server for debugging.
@property (nonatomic, copy) NSUUID * _Nullable correlationId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MSALPublicClientApplicationConfig;
@class MSALNativeAuthSignUpParameters;
@protocol SignUpStartDelegate;
@class MSALNativeAuthSignInParameters;
@protocol SignInStartDelegate;
@class MSALNativeAuthResetPasswordParameters;
@protocol ResetPasswordStartDelegate;
@class MSALAuthority;

/// <pre>
///     do {
///         nativeAuth = try MSALNativeAuthPublicClientApplication(
///             clientId: "Enter_the_Application_Id_Here",
///             tenantSubdomain: "Enter_the_Tenant_Subdomain_Here",
///             challengeTypes: [.OOB]
///        )
///        print("Initialised Native Auth successfully.")
///     } catch {
///         print("Unable to initialize MSAL \(error)")
///     }
/// </pre>
SWIFT_CLASS("_TtC4MSAL37MSALNativeAuthPublicClientApplication")
@interface MSALNativeAuthPublicClientApplication : MSALPublicClientApplication
/// Initialize a MSALNativePublicClientApplication with a given configuration and challenge types
/// \param config Configuration for PublicClientApplication
///
/// \param challengeTypes The set of capabilities that this application can support as an <code>MSALNativeAuthChallengeTypes</code> optionset
///
///
/// throws:
/// An error that occurred creating the application object
- (nullable instancetype)initWithConfiguration:(MSALPublicClientApplicationConfig * _Nonnull)config challengeTypes:(MSALNativeAuthChallengeTypes)challengeTypes error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize a MSALNativePublicClientApplication.
/// \param clientId The client ID of the application, this should come from the app developer portal.
///
/// \param tenantSubdomain The subdomain of the tenant, this should come from the app developer portal.
///
/// \param challengeTypes The set of capabilities that this application can support as an <code>MSALNativeAuthChallengeTypes</code> optionset
///
/// \param redirectUri Optional. The redirect URI for the application, this should come from the app developer portal.
///
///
/// throws:
/// An error that occurred creating the application object
- (nullable instancetype)initWithClientId:(NSString * _Nonnull)clientId tenantSubdomain:(NSString * _Nonnull)tenantSubdomain challengeTypes:(MSALNativeAuthChallengeTypes)challengeTypes redirectUri:(NSString * _Nullable)redirectUri error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Sign up a user using parameters.
/// \param parameters Parameters used for the Sign Up flow.
///
/// \param delegate Delegate that receives callbacks for the Sign Up flow.
///
- (void)signUpWithParameters:(MSALNativeAuthSignUpParameters * _Nonnull)parameters delegate:(id <SignUpStartDelegate> _Nonnull)delegate;
/// Sign up a user with a given username and password.
/// \param username Username for the new account.
///
/// \param password Optional. Password to be used for the new account.
///
/// \param attributes Optional. User attributes to be used during account creation.
///
/// \param correlationId Optional. UUID to correlate this request with the server for debugging.
///
/// \param delegate Delegate that receives callbacks for the Sign Up flow.
///
- (void)signUpWithUsername:(NSString * _Nonnull)username password:(NSString * _Nullable)password attributes:(NSDictionary<NSString *, id> * _Nullable)attributes correlationId:(NSUUID * _Nullable)correlationId delegate:(id <SignUpStartDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'signUp(parameters:)' instead.");
/// Sign in a user using parameters.
/// \param parameters Parameters used for the Sign In flow.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInParameters:(MSALNativeAuthSignInParameters * _Nonnull)parameters delegate:(id <SignInStartDelegate> _Nonnull)delegate;
/// Sign in a user with a given username and password.
/// \param username Username for the account
///
/// \param password Optional. Password for the account.
///
/// \param scopes Optional. Permissions you want included in the access token received after sign in flow has completed.
///
/// \param correlationId Optional. UUID to correlate this request with the server for debugging.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInUsername:(NSString * _Nonnull)username password:(NSString * _Nullable)password scopes:(NSArray<NSString *> * _Nullable)scopes correlationId:(NSUUID * _Nullable)correlationId delegate:(id <SignInStartDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'signIn(parameters:)' instead.");
/// Reset the password using parameters
/// \param parameters Parameters used for the Reset Password flow.
///
/// \param delegate Delegate that receives callbacks for the Reset Password flow.
///
- (void)resetPasswordWithParameters:(MSALNativeAuthResetPasswordParameters * _Nonnull)parameters delegate:(id <ResetPasswordStartDelegate> _Nonnull)delegate;
/// Reset the password for a given username.
/// \param username Username for the account.
///
/// \param correlationId Optional. UUID to correlate this request with the server for debugging.
///
/// \param delegate Delegate that receives callbacks for the Reset Password flow.
///
- (void)resetPasswordWithUsername:(NSString * _Nonnull)username correlationId:(NSUUID * _Nullable)correlationId delegate:(id <ResetPasswordStartDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'resetPassword(parameters:)' instead.");
/// Retrieve the current signed in account from the cache.
/// \param correlationId Optional. UUID to correlate this request with the server for debugging.
///
///
/// returns:
/// An object representing the account information if present in the local cache.
- (MSALNativeAuthUserAccountResult * _Nullable)getNativeAuthUserAccountWithCorrelationId:(NSUUID * _Nullable)correlationId SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithConfiguration:(MSALPublicClientApplicationConfig * _Nonnull)config error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithClientId:(NSString * _Nonnull)clientId error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithClientId:(NSString * _Nonnull)clientId authority:(MSALAuthority * _Nullable)authority error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithClientId:(NSString * _Nonnull)clientId authority:(MSALAuthority * _Nullable)authority redirectUri:(NSString * _Nullable)redirectUri error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithClientId:(NSString * _Nonnull)clientId keychainGroup:(NSString * _Nullable)keychainGroup authority:(MSALAuthority * _Nullable)authority redirectUri:(NSString * _Nullable)redirectUri error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Class that defines the structure of a Required Attribute
SWIFT_CLASS("_TtC4MSAL31MSALNativeAuthRequiredAttribute")
@interface MSALNativeAuthRequiredAttribute : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encapsulates the parameters passed to the resetPassword method of MSALNativeAuthPublicClientApplication
SWIFT_CLASS("_TtC4MSAL37MSALNativeAuthResetPasswordParameters")
@interface MSALNativeAuthResetPasswordParameters : NSObject
/// username of the account to reset password.
@property (nonatomic, copy) NSString * _Nonnull username;
/// UUID to correlate this request with the server for debugging.
@property (nonatomic, copy) NSUUID * _Nullable correlationId;
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encapsulates the parameters passed to the signIn method after resetPassword
SWIFT_CLASS("_TtC4MSAL48MSALNativeAuthSignInAfterResetPasswordParameters")
@interface MSALNativeAuthSignInAfterResetPasswordParameters : NSObject
/// Permissions you want included in the access token received.
/// Not all scopes are guaranteed to be included in the access token returned.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable scopes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Encapsulates the parameters passed to the signIn method after signUp
SWIFT_CLASS("_TtC4MSAL41MSALNativeAuthSignInAfterSignUpParameters")
@interface MSALNativeAuthSignInAfterSignUpParameters : NSObject
/// Permissions you want included in the access token received.
/// Not all scopes are guaranteed to be included in the access token returned.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable scopes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MSALClaimsRequest;

/// Encapsulates the parameters passed to the signIn method of MSALNativeAuthPublicClientApplication
SWIFT_CLASS("_TtC4MSAL30MSALNativeAuthSignInParameters")
@interface MSALNativeAuthSignInParameters : NSObject
/// username of the account to sign in.
@property (nonatomic, copy) NSString * _Nonnull username;
/// password of the account to sign in.
@property (nonatomic, copy) NSString * _Nullable password;
/// Permissions you want included in the access token received.
/// Not all scopes are guaranteed to be included in the access token returned.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable scopes;
/// The claims parameter that needs to be sent to the service.
@property (nonatomic, strong) MSALClaimsRequest * _Nullable claimsRequest;
/// UUID to correlate this request with the server for debugging.
@property (nonatomic, copy) NSUUID * _Nullable correlationId;
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encapsulates the parameters passed to the signUp method of MSALNativeAuthPublicClientApplication
SWIFT_CLASS("_TtC4MSAL30MSALNativeAuthSignUpParameters")
@interface MSALNativeAuthSignUpParameters : NSObject
/// username of the account to sign up.
@property (nonatomic, copy) NSString * _Nonnull username;
/// password of the account to sign up.
@property (nonatomic, copy) NSString * _Nullable password;
/// user attributes to be used during account creation.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable attributes;
/// UUID to correlate this request with the server for debugging.
@property (nonatomic, copy) NSUUID * _Nullable correlationId;
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSDate;

SWIFT_CLASS("_TtC4MSAL25MSALNativeAuthTokenResult")
@interface MSALNativeAuthTokenResult : NSObject
/// The Access Token requested.
/// Note that if access token is not returned in token response, this property will be returned as an empty string.
@property (nonatomic, readonly, copy) NSString * _Nonnull accessToken;
/// Get the list of permissions for the access token for the account.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull scopes;
/// Get the expiration date for the access token for the account.
/// This value is calculated based on current UTC time measured locally and the value expiresIn returned from the service
@property (nonatomic, readonly, copy) NSDate * _Nullable expiresOn;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MSALAccount;

/// Class that groups account and token information.
SWIFT_CLASS("_TtC4MSAL31MSALNativeAuthUserAccountResult")
@interface MSALNativeAuthUserAccountResult : NSObject
/// The account object that holds account information.
@property (nonatomic, strong) MSALAccount * _Nonnull account;
/// Get the latest ID token for the account.
@property (nonatomic, readonly, copy) NSString * _Nullable idToken;
/// Removes all the data from the cache.
- (void)signOut;
/// \param parameters Parameters used for the Get Access Token flow.
///
/// \param delegate Delegate that receives callbacks for the Get Access Token flow.
///
- (void)getAccessTokenWithParameters:(MSALNativeAuthGetAccessTokenParameters * _Nonnull)parameters delegate:(id <CredentialsDelegate> _Nonnull)delegate;
/// Retrieves the access token for the default OIDC(openid, offline_access, profile) scopes from the cache.
/// \param forceRefresh Optional. Ignore any existing access token in the cache and force MSAL to get a new access token from the service.
///
/// \param correlationId Optional. UUID to correlate this request with the server for debugging.
///
/// \param delegate Delegate that receives callbacks for the Get Access Token flow.
///
- (void)getAccessTokenWithForceRefresh:(BOOL)forceRefresh correlationId:(NSUUID * _Nullable)correlationId delegate:(id <CredentialsDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'getAccessToken(parameters:)' instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Class that defines the structure and type of a PasswordRequired error
SWIFT_CLASS("_TtC4MSAL21PasswordRequiredError")
@interface PasswordRequiredError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> when the password is not valid.
@property (nonatomic, readonly) BOOL isInvalidPassword;
@end


/// Class that defines the structure and type of a ResendCode error
SWIFT_CLASS("_TtC4MSAL15ResendCodeError")
@interface ResendCodeError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@end


/// Base class for the ResetPassword state
SWIFT_CLASS("_TtC4MSAL22ResetPasswordBaseState")
@interface ResetPasswordBaseState : MSALNativeAuthBaseState
@end

@protocol ResetPasswordResendCodeDelegate;
@protocol ResetPasswordVerifyCodeDelegate;

/// An object of this type is created when a user is required to supply a verification code to continue a reset password flow.
SWIFT_CLASS("_TtC4MSAL30ResetPasswordCodeRequiredState")
@interface ResetPasswordCodeRequiredState : ResetPasswordBaseState
/// Requests the server to resend the verification code to the user.
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)resendCodeWithDelegate:(id <ResetPasswordResendCodeDelegate> _Nonnull)delegate;
/// Submits the code to the server for verification.
/// \param code Verification code that the user supplied.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitCodeWithCode:(NSString * _Nonnull)code delegate:(id <ResetPasswordVerifyCodeDelegate> _Nonnull)delegate;
@end


@class ResetPasswordRequiredState;
@class SignInAfterResetPasswordState;

/// Protocol that defines the methods of a ResetPasswordRequired delegate
SWIFT_PROTOCOL("_TtP4MSAL29ResetPasswordRequiredDelegate_")
@protocol ResetPasswordRequiredDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onResetPasswordRequiredErrorWithError:(PasswordRequiredError * _Nonnull)error newState:(ResetPasswordRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that the reset password operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onResetPasswordRequiredError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onResetPasswordCompletedWithNewState:(SignInAfterResetPasswordState * _Nonnull)newState;
@end


/// An object of this type is created when a user is required to supply a password to continue a reset password flow.
SWIFT_CLASS("_TtC4MSAL26ResetPasswordRequiredState")
@interface ResetPasswordRequiredState : ResetPasswordBaseState
/// Submits the password to the server for verification.
/// \param password Password that the user supplied.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitPasswordWithPassword:(NSString * _Nonnull)password delegate:(id <ResetPasswordRequiredDelegate> _Nonnull)delegate;
@end



/// Protocol that defines the methods of a ResetPasswordResendCode delegate
SWIFT_PROTOCOL("_TtP4MSAL31ResetPasswordResendCodeDelegate_")
@protocol ResetPasswordResendCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onResetPasswordResendCodeErrorWithError:(ResendCodeError * _Nonnull)error newState:(ResetPasswordCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onResetPasswordResendCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onResetPasswordResendCodeRequiredWithNewState:(ResetPasswordCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
@end

@class ResetPasswordStartError;

/// Protocol that defines the methods of a ResetPasswordStart delegate
SWIFT_PROTOCOL("_TtP4MSAL26ResetPasswordStartDelegate_")
@protocol ResetPasswordStartDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onResetPasswordStartErrorWithError:(ResetPasswordStartError * _Nonnull)error;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onResetPasswordStartError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onResetPasswordCodeRequiredWithNewState:(ResetPasswordCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
@end


/// Class that defines the structure and type of a ResetPasswordStart error
SWIFT_CLASS("_TtC4MSAL23ResetPasswordStartError")
@interface ResetPasswordStartError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> if the user does not have a password.
@property (nonatomic, readonly) BOOL isUserDoesNotHavePassword;
/// Returns <code>true</code> if the user that is trying to reset their password cannot be found.
@property (nonatomic, readonly) BOOL isUserNotFound;
/// Returns <code>true</code> when the username is not valid.
@property (nonatomic, readonly) BOOL isInvalidUsername;
@end

@class VerifyCodeError;

/// Protocol that defines the methods of a ResetPasswordVerifyCode delegate
SWIFT_PROTOCOL("_TtP4MSAL31ResetPasswordVerifyCodeDelegate_")
@protocol ResetPasswordVerifyCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onResetPasswordVerifyCodeErrorWithError:(VerifyCodeError * _Nonnull)error newState:(ResetPasswordCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a password is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onResetPasswordVerifyCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onPasswordRequiredWithNewState:(ResetPasswordRequiredState * _Nonnull)newState;
@end


/// Class that defines the structure and type of a RetrieveAccessToken error
SWIFT_CLASS("_TtC4MSAL24RetrieveAccessTokenError")
@interface RetrieveAccessTokenError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> if the refresh token has expired.
@property (nonatomic, readonly) BOOL isRefreshTokenExpired;
/// Returns <code>true</code> if the scope list is empty.
@property (nonatomic, readonly) BOOL isInvalidScope;
@end


/// Base class for the SignInAfterPreviousFlow state
SWIFT_CLASS("_TtC4MSAL32SignInAfterPreviousFlowBaseState")
@interface SignInAfterPreviousFlowBaseState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class SignInAfterResetPasswordError;

/// Protocol that defines the methods of a SignInAfterResetPassword delegate
SWIFT_PROTOCOL("_TtP4MSAL32SignInAfterResetPasswordDelegate_")
@protocol SignInAfterResetPasswordDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onSignInAfterResetPasswordErrorWithError:(SignInAfterResetPasswordError * _Nonnull)error;
@optional
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInAfterResetPasswordError(error:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end


/// Class that defines the structure and type of a SignInAfterResetPassword error
SWIFT_CLASS("_TtC4MSAL29SignInAfterResetPasswordError")
@interface SignInAfterResetPasswordError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@end


/// An object of this type is created when a user has reset their password successfully.
SWIFT_CLASS("_TtC4MSAL29SignInAfterResetPasswordState")
@interface SignInAfterResetPasswordState : SignInAfterPreviousFlowBaseState
/// Sign in the user that just reset the password.
/// \param parameters Parameters used to Sign In the user after the Reset Password flow.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInParameters:(MSALNativeAuthSignInAfterResetPasswordParameters * _Nonnull)parameters delegate:(id <SignInAfterResetPasswordDelegate> _Nonnull)delegate;
/// Sign in the user that just reset the password.
/// \param scopes Optional. Permissions you want included in the access token received after sign in flow has completed.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInScopes:(NSArray<NSString *> * _Nullable)scopes delegate:(id <SignInAfterResetPasswordDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'signIn(parameters:)' instead.");
@end

@class SignInAfterSignUpError;

/// Protocol that defines the methods of a SignInAfterSignUp delegate
SWIFT_PROTOCOL("_TtP4MSAL25SignInAfterSignUpDelegate_")
@protocol SignInAfterSignUpDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onSignInAfterSignUpErrorWithError:(SignInAfterSignUpError * _Nonnull)error;
@optional
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInAfterSignUpError(error:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end


/// Class that defines the structure and type of a SignInAfterSignUp error
SWIFT_CLASS("_TtC4MSAL22SignInAfterSignUpError")
@interface SignInAfterSignUpError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@end


/// An object of this type is created when a user has signed up successfully.
SWIFT_CLASS("_TtC4MSAL22SignInAfterSignUpState")
@interface SignInAfterSignUpState : SignInAfterPreviousFlowBaseState
/// Sign in the user that signed up.
/// \param parameters Parameters used to Sign In the user after the Sign Up flow.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInParameters:(MSALNativeAuthSignInAfterSignUpParameters * _Nonnull)parameters delegate:(id <SignInAfterSignUpDelegate> _Nonnull)delegate;
/// Sign in the user that signed up.
/// \param scopes Optional. Permissions you want included in the access token received after sign in flow has completed.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInScopes:(NSArray<NSString *> * _Nullable)scopes delegate:(id <SignInAfterSignUpDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'signIn(parameters:)' instead.");
@end


/// Base class for the SignIn state
SWIFT_CLASS("_TtC4MSAL15SignInBaseState")
@interface SignInBaseState : MSALNativeAuthBaseState
@end

@protocol SignInResendCodeDelegate;
@protocol SignInVerifyCodeDelegate;

/// An object of this type is created when a user is required to supply a verification code to continue a sign in flow.
SWIFT_CLASS("_TtC4MSAL23SignInCodeRequiredState")
@interface SignInCodeRequiredState : SignInBaseState
/// Requests the server to resend the verification code to the user.
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)resendCodeWithDelegate:(id <SignInResendCodeDelegate> _Nonnull)delegate;
/// Submits the code to the server for verification.
/// \param code Verification code that the user supplies.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitCodeWithCode:(NSString * _Nonnull)code delegate:(id <SignInVerifyCodeDelegate> _Nonnull)delegate;
@end


@class SignInPasswordRequiredState;

/// Protocol that defines the methods of a SignInPasswordRequired delegate
SWIFT_PROTOCOL("_TtP4MSAL30SignInPasswordRequiredDelegate_")
@protocol SignInPasswordRequiredDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInPasswordRequiredErrorWithError:(PasswordRequiredError * _Nonnull)error newState:(SignInPasswordRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a multi factor authentication (MFA) is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInPasswordRequiredError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInAwaitingMFAWithNewState:(AwaitingMFAState * _Nonnull)newState;
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
///
/// If a flow requires this optional method and it is not implemented, then <code>onSignInPasswordRequiredError(error:newState:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end


/// An object of this type is created when a user is required to supply a password to continue a sign in flow.
SWIFT_CLASS("_TtC4MSAL27SignInPasswordRequiredState")
@interface SignInPasswordRequiredState : SignInBaseState
/// Submits the password to the server for verification.
/// \param password Password that the user supplied.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitPasswordWithPassword:(NSString * _Nonnull)password delegate:(id <SignInPasswordRequiredDelegate> _Nonnull)delegate;
@end



/// Protocol that defines the methods of a SignInResendCode delegate
SWIFT_PROTOCOL("_TtP4MSAL24SignInResendCodeDelegate_")
@protocol SignInResendCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInResendCodeErrorWithError:(ResendCodeError * _Nonnull)error newState:(SignInCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInResendCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onSignInResendCodeCodeRequiredWithNewState:(SignInCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
@end

@class SignInStartError;

/// Protocol that defines the methods of a SignInStart delegate
SWIFT_PROTOCOL("_TtP4MSAL19SignInStartDelegate_")
@protocol SignInStartDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onSignInStartErrorWithError:(SignInStartError * _Nonnull)error;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInStartError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onSignInCodeRequiredWithNewState:(SignInCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
/// Notifies the delegate that a password is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInStartError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInPasswordRequiredWithNewState:(SignInPasswordRequiredState * _Nonnull)newState;
/// Notifies the delegate that a multi factor authentication (MFA) is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInStartError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInAwaitingMFAWithNewState:(AwaitingMFAState * _Nonnull)newState;
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInStartError(error:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end


/// Class that defines the structure and type of a SignInStart error
SWIFT_CLASS("_TtC4MSAL16SignInStartError")
@interface SignInStartError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> if the user that is trying to sign in cannot be found.
@property (nonatomic, readonly) BOOL isUserNotFound;
/// Returns <code>true</code> when the credentials are not valid.
@property (nonatomic, readonly) BOOL isInvalidCredentials;
/// Returns <code>true</code> when the username is not valid.
@property (nonatomic, readonly) BOOL isInvalidUsername;
@end


/// Protocol that defines the methods of a SignInVerifyCode delegate
SWIFT_PROTOCOL("_TtP4MSAL24SignInVerifyCodeDelegate_")
@protocol SignInVerifyCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInVerifyCodeErrorWithError:(VerifyCodeError * _Nonnull)error newState:(SignInCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInVerifyCodeError(error:newState:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end

@class SignUpAttributesRequiredState;

/// Protocol that defines the methods of a SignUpAttributesRequired delegate
SWIFT_PROTOCOL("_TtP4MSAL32SignUpAttributesRequiredDelegate_")
@protocol SignUpAttributesRequiredDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onSignUpAttributesRequiredErrorWithError:(AttributesRequiredError * _Nonnull)error;
@optional
/// Notifies the delegate that there are some required attributes to be sent.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpAttributesRequiredError(error:)</code> will be called.
/// \param attributes List of required attributes.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpAttributesRequiredWithAttributes:(NSArray<MSALNativeAuthRequiredAttribute *> * _Nonnull)attributes newState:(SignUpAttributesRequiredState * _Nonnull)newState;
/// Notifies the delegate that invalid attributes were sent.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpAttributesRequiredError(error:)</code> will be called.
/// \param attributeNames List of attribute names that failed validation.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpAttributesInvalidWithAttributeNames:(NSArray<NSString *> * _Nonnull)attributeNames newState:(SignUpAttributesRequiredState * _Nonnull)newState;
/// Notifies the delegate that the sign up operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpAttributesRequiredError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpCompletedWithNewState:(SignInAfterSignUpState * _Nonnull)newState;
@end


/// Base class for the SignUp state
SWIFT_CLASS("_TtC4MSAL15SignUpBaseState")
@interface SignUpBaseState : MSALNativeAuthBaseState
@end


/// An object of this type is created when a user is required to supply attributes to continue a sign up flow.
SWIFT_CLASS("_TtC4MSAL29SignUpAttributesRequiredState")
@interface SignUpAttributesRequiredState : SignUpBaseState
/// Submits the attributes to the server for verification.
/// \param attributes Dictionary of attributes that the user supplied.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitAttributesWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes delegate:(id <SignUpAttributesRequiredDelegate> _Nonnull)delegate;
@end



@protocol SignUpResendCodeDelegate;
@protocol SignUpVerifyCodeDelegate;

/// An object of this type is created when a user is required to supply a verification code to continue a sign up flow.
SWIFT_CLASS("_TtC4MSAL23SignUpCodeRequiredState")
@interface SignUpCodeRequiredState : SignUpBaseState
/// Requests the server to resend the verification code to the user.
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)resendCodeWithDelegate:(id <SignUpResendCodeDelegate> _Nonnull)delegate;
/// Submits the code to the server for verification.
/// \param code Verification code that the user supplies.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitCodeWithCode:(NSString * _Nonnull)code delegate:(id <SignUpVerifyCodeDelegate> _Nonnull)delegate;
@end


@class SignUpPasswordRequiredState;

/// Protocol that defines the methods of a SignUpPasswordRequired delegate
SWIFT_PROTOCOL("_TtP4MSAL30SignUpPasswordRequiredDelegate_")
@protocol SignUpPasswordRequiredDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpPasswordRequiredErrorWithError:(PasswordRequiredError * _Nonnull)error newState:(SignUpPasswordRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that attributes are required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpPasswordRequiredError(error:newState:)</code> will be called.
/// \param attributes List of required attributes.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpAttributesRequiredWithAttributes:(NSArray<MSALNativeAuthRequiredAttribute *> * _Nonnull)attributes newState:(SignUpAttributesRequiredState * _Nonnull)newState;
/// Notifies the delegate that the sign up operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpPasswordRequiredError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpCompletedWithNewState:(SignInAfterSignUpState * _Nonnull)newState;
@end


/// An object of this type is created when a user is required to supply a password to continue a sign up flow.
SWIFT_CLASS("_TtC4MSAL27SignUpPasswordRequiredState")
@interface SignUpPasswordRequiredState : SignUpBaseState
/// Submits the password to the server for verification.
/// \param password Password that the user supplied.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitPasswordWithPassword:(NSString * _Nonnull)password delegate:(id <SignUpPasswordRequiredDelegate> _Nonnull)delegate;
@end



/// Protocol that defines the methods of a SignUpResendCode delegate
SWIFT_PROTOCOL("_TtP4MSAL24SignUpResendCodeDelegate_")
@protocol SignUpResendCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpResendCodeErrorWithError:(ResendCodeError * _Nonnull)error newState:(SignUpCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpResendCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onSignUpResendCodeCodeRequiredWithNewState:(SignUpCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
@end

@class SignUpStartError;

/// Protocol that defines the methods of a SignUpStart delegate
SWIFT_PROTOCOL("_TtP4MSAL19SignUpStartDelegate_")
@protocol SignUpStartDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onSignUpStartErrorWithError:(SignUpStartError * _Nonnull)error;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpStartError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onSignUpCodeRequiredWithNewState:(SignUpCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
/// Notifies the delegate that invalid attributes were sent.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpStartError(error:)</code> will be called.
/// \param attributeNames List of attribute names that failed validation.
///
- (void)onSignUpAttributesInvalidWithAttributeNames:(NSArray<NSString *> * _Nonnull)attributeNames;
@end


/// Class that defines the structure and type of a SignUpStart error
SWIFT_CLASS("_TtC4MSAL16SignUpStartError")
@interface SignUpStartError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> when the user is trying to register an existing username.
@property (nonatomic, readonly) BOOL isUserAlreadyExists;
/// Returns <code>true</code> when the password is not valid.
@property (nonatomic, readonly) BOOL isInvalidPassword;
/// Returns <code>true</code> when the username is not valid.
@property (nonatomic, readonly) BOOL isInvalidUsername;
@end


/// Protocol that defines the methods of a SignUpVerifyCode delegate
SWIFT_PROTOCOL("_TtP4MSAL24SignUpVerifyCodeDelegate_")
@protocol SignUpVerifyCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpVerifyCodeErrorWithError:(VerifyCodeError * _Nonnull)error newState:(SignUpCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that attributes are required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpVerifyCodeError(error:newState:)</code> will be called.
/// \param attributes List of required attributes.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpAttributesRequiredWithAttributes:(NSArray<MSALNativeAuthRequiredAttribute *> * _Nonnull)attributes newState:(SignUpAttributesRequiredState * _Nonnull)newState;
/// Notifies the delegate that a password is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpVerifyCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpPasswordRequiredWithNewState:(SignUpPasswordRequiredState * _Nonnull)newState;
/// Notifies the delegate that the sign up operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpVerifyCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpCompletedWithNewState:(SignInAfterSignUpState * _Nonnull)newState;
@end


/// Class that defines the structure and type of a VerifyCode error
SWIFT_CLASS("_TtC4MSAL15VerifyCodeError")
@interface VerifyCodeError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> when the code introduced is not valid.
@property (nonatomic, readonly) BOOL isInvalidCode;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef MSAL_SWIFT_H
#define MSAL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <MSAL/MSAL.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MSAL",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class NSUUID;

/// Class that defines the basic structure of a Native Auth error
SWIFT_CLASS("_TtC4MSAL19MSALNativeAuthError")
@interface MSALNativeAuthError : NSObject
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Correlation ID used for the request
@property (nonatomic, readonly, copy) NSUUID * _Nonnull correlationId;
/// Error codes returned along with the error
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull errorCodes;
/// Error uri that can be followed to get more information about the error returned by the server
@property (nonatomic, readonly, copy) NSString * _Nullable errorUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class that defines the structure and type of an Attributes Required error
SWIFT_CLASS("_TtC4MSAL23AttributesRequiredError")
@interface AttributesRequiredError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@end


/// Base class for Native Auth states
SWIFT_CLASS("_TtC4MSAL23MSALNativeAuthBaseState")
@interface MSALNativeAuthBaseState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Base class for MFA state
SWIFT_CLASS("_TtC4MSAL12MFABaseState")
@interface MFABaseState : MSALNativeAuthBaseState
@end

@protocol MFARequestChallengeDelegate;

/// An object of this type is created whenever a user needs to make a specific request to send the MFA challenge.
SWIFT_CLASS("_TtC4MSAL16AwaitingMFAState")
@interface AwaitingMFAState : MFABaseState
/// Requests the server to send the challenge to the default authentication method.
/// warning:
/// ⚠️  this API is experimental. It may be changed in the future without notice. Do not use in production applications.
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)requestChallengeWithDelegate:(id <MFARequestChallengeDelegate> _Nonnull)delegate;
@end

@class RetrieveAccessTokenError;
@class MSALNativeAuthTokenResult;

/// Protocol that defines the methods of a Credentials delegate
SWIFT_PROTOCOL("_TtP4MSAL19CredentialsDelegate_")
@protocol CredentialsDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onAccessTokenRetrieveErrorWithError:(RetrieveAccessTokenError * _Nonnull)error;
@optional
/// Notifies the delegate that the operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onAccessTokenRetrieveError(error:)</code> will be called.
/// \param result The access token result.
///
- (void)onAccessTokenRetrieveCompletedWithResult:(MSALNativeAuthTokenResult * _Nonnull)result;
@end



@class MFAGetAuthMethodsError;
@class MFARequiredState;
@class MSALAuthMethod;

/// Protocol that defines the methods of a MFAGetAuthMethodsDelegate delegate
SWIFT_PROTOCOL("_TtP4MSAL25MFAGetAuthMethodsDelegate_")
@protocol MFAGetAuthMethodsDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onMFAGetAuthMethodsErrorWithError:(MFAGetAuthMethodsError * _Nonnull)error newState:(MFARequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that the list of authentication methods is now available.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onMFAGetAuthMethodsError(error:)</code> will be called.
/// \param authMethods list of authentication method.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onMFAGetAuthMethodsSelectionRequiredWithAuthMethods:(NSArray<MSALAuthMethod *> * _Nonnull)authMethods newState:(MFARequiredState * _Nonnull)newState;
@end


/// Class that defines the structure and type of a MFAGetAuthMethodsError
SWIFT_CLASS("_TtC4MSAL22MFAGetAuthMethodsError")
@interface MFAGetAuthMethodsError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
@end

@class MFARequestChallengeError;
@class MSALNativeAuthChannelType;

/// Protocol that defines the methods of a MFARequestChallenge delegate
SWIFT_PROTOCOL("_TtP4MSAL27MFARequestChallengeDelegate_")
@protocol MFARequestChallengeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onMFARequestChallengeErrorWithError:(MFARequestChallengeError * _Nonnull)error newState:(MFARequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a verification is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onMFARequestChallengeError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onMFARequestChallengeVerificationRequiredWithNewState:(MFARequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
/// Notifies the delegate that the list of authentication methods is now available.
/// The user is required to choose an authentication method and then proceed with the “newState” to advance in the MFA process.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onMFARequestChallengeError(error:)</code> will be called.
/// \param authMethods list of authentication method
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onMFARequestChallengeSelectionRequiredWithAuthMethods:(NSArray<MSALAuthMethod *> * _Nonnull)authMethods newState:(MFARequiredState * _Nonnull)newState;
@end


/// Class that defines the structure and type of a MFARequestChallengeError
SWIFT_CLASS("_TtC4MSAL24MFARequestChallengeError")
@interface MFARequestChallengeError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
@end

@protocol MFASubmitChallengeDelegate;

SWIFT_CLASS("_TtC4MSAL16MFARequiredState")
@interface MFARequiredState : MFABaseState
/// Requests the server to send the challenge to the specified auth method or the default one.
/// warning:
/// ⚠️  this API is experimental. It may be changed in the future without notice. Do not use in production applications.
/// \param authMethod Optional. The authentication method you want to use for sending the challenge
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)requestChallengeWithAuthMethod:(MSALAuthMethod * _Nullable)authMethod delegate:(id <MFARequestChallengeDelegate> _Nonnull)delegate;
/// Requests the available MFA authentication methods.
/// warning:
/// ⚠️  this API is experimental. It may be changed in the future without notice. Do not use in production applications.
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)getAuthMethodsWithDelegate:(id <MFAGetAuthMethodsDelegate> _Nonnull)delegate;
/// Submits the MFA challenge to the server for verification.
/// warning:
/// ⚠️  this API is experimental. It may be changed in the future without notice. Do not use in production applications.
/// \param challenge Verification challenge that the user supplies.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitChallengeWithChallenge:(NSString * _Nonnull)challenge delegate:(id <MFASubmitChallengeDelegate> _Nonnull)delegate;
@end


@class MFASubmitChallengeError;
@class MSALNativeAuthUserAccountResult;

/// Protocol that defines the methods of a MFAGetAuthMethodsDelegate delegate
SWIFT_PROTOCOL("_TtP4MSAL26MFASubmitChallengeDelegate_")
@protocol MFASubmitChallengeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onMFASubmitChallengeErrorWithError:(MFASubmitChallengeError * _Nonnull)error newState:(MFARequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onMFASubmitChallengeError(error:newState:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end


/// Class that defines the structure and type of a MFASubmitChallengeError
SWIFT_CLASS("_TtC4MSAL23MFASubmitChallengeError")
@interface MFASubmitChallengeError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> when the challenge introduced is not valid.
@property (nonatomic, readonly) BOOL isInvalidChallenge;
@end


/// MSALAuthMethod represents a user’s authentication methods.
SWIFT_CLASS("_TtC4MSAL14MSALAuthMethod")
@interface MSALAuthMethod : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// The channel type via which a code was sent
SWIFT_CLASS("_TtC4MSAL25MSALNativeAuthChannelType")
@interface MSALNativeAuthChannelType : NSObject
/// Value of the channel used.
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/// Returns <code>true</code> if the channel is email.
@property (nonatomic, readonly) BOOL isEmailType;
/// Returns <code>true</code> if the channel is phone.
@property (nonatomic, readonly) BOOL isPhoneType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Encapsulates the parameters passed to the getAccessToken method of MSALNativeAuthUserAccountResult
SWIFT_CLASS("_TtC4MSAL38MSALNativeAuthGetAccessTokenParameters")
@interface MSALNativeAuthGetAccessTokenParameters : NSObject
/// Set to true to ignore any existing access token in the cache and force MSAL to get a new access token from the service.
@property (nonatomic) BOOL forceRefresh;
/// Permissions you want included in the access token received.
/// Not all scopes are guaranteed to be included in the access token returned.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable scopes;
/// UUID to correlate this request with the server for debugging.
@property (nonatomic, copy) NSUUID * _Nullable correlationId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MSALPublicClientApplicationConfig;
@class MSALNativeAuthSignUpParameters;
@protocol SignUpStartDelegate;
@class MSALNativeAuthSignInParameters;
@protocol SignInStartDelegate;
@class MSALNativeAuthResetPasswordParameters;
@protocol ResetPasswordStartDelegate;
@class MSALAuthority;

/// <pre>
///     do {
///         nativeAuth = try MSALNativeAuthPublicClientApplication(
///             clientId: "Enter_the_Application_Id_Here",
///             tenantSubdomain: "Enter_the_Tenant_Subdomain_Here",
///             challengeTypes: [.OOB]
///        )
///        print("Initialised Native Auth successfully.")
///     } catch {
///         print("Unable to initialize MSAL \(error)")
///     }
/// </pre>
SWIFT_CLASS("_TtC4MSAL37MSALNativeAuthPublicClientApplication")
@interface MSALNativeAuthPublicClientApplication : MSALPublicClientApplication
/// Initialize a MSALNativePublicClientApplication with a given configuration and challenge types
/// \param config Configuration for PublicClientApplication
///
/// \param challengeTypes The set of capabilities that this application can support as an <code>MSALNativeAuthChallengeTypes</code> optionset
///
///
/// throws:
/// An error that occurred creating the application object
- (nullable instancetype)initWithConfiguration:(MSALPublicClientApplicationConfig * _Nonnull)config challengeTypes:(MSALNativeAuthChallengeTypes)challengeTypes error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initialize a MSALNativePublicClientApplication.
/// \param clientId The client ID of the application, this should come from the app developer portal.
///
/// \param tenantSubdomain The subdomain of the tenant, this should come from the app developer portal.
///
/// \param challengeTypes The set of capabilities that this application can support as an <code>MSALNativeAuthChallengeTypes</code> optionset
///
/// \param redirectUri Optional. The redirect URI for the application, this should come from the app developer portal.
///
///
/// throws:
/// An error that occurred creating the application object
- (nullable instancetype)initWithClientId:(NSString * _Nonnull)clientId tenantSubdomain:(NSString * _Nonnull)tenantSubdomain challengeTypes:(MSALNativeAuthChallengeTypes)challengeTypes redirectUri:(NSString * _Nullable)redirectUri error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Sign up a user using parameters.
/// \param parameters Parameters used for the Sign Up flow.
///
/// \param delegate Delegate that receives callbacks for the Sign Up flow.
///
- (void)signUpWithParameters:(MSALNativeAuthSignUpParameters * _Nonnull)parameters delegate:(id <SignUpStartDelegate> _Nonnull)delegate;
/// Sign up a user with a given username and password.
/// \param username Username for the new account.
///
/// \param password Optional. Password to be used for the new account.
///
/// \param attributes Optional. User attributes to be used during account creation.
///
/// \param correlationId Optional. UUID to correlate this request with the server for debugging.
///
/// \param delegate Delegate that receives callbacks for the Sign Up flow.
///
- (void)signUpWithUsername:(NSString * _Nonnull)username password:(NSString * _Nullable)password attributes:(NSDictionary<NSString *, id> * _Nullable)attributes correlationId:(NSUUID * _Nullable)correlationId delegate:(id <SignUpStartDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'signUp(parameters:)' instead.");
/// Sign in a user using parameters.
/// \param parameters Parameters used for the Sign In flow.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInParameters:(MSALNativeAuthSignInParameters * _Nonnull)parameters delegate:(id <SignInStartDelegate> _Nonnull)delegate;
/// Sign in a user with a given username and password.
/// \param username Username for the account
///
/// \param password Optional. Password for the account.
///
/// \param scopes Optional. Permissions you want included in the access token received after sign in flow has completed.
///
/// \param correlationId Optional. UUID to correlate this request with the server for debugging.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInUsername:(NSString * _Nonnull)username password:(NSString * _Nullable)password scopes:(NSArray<NSString *> * _Nullable)scopes correlationId:(NSUUID * _Nullable)correlationId delegate:(id <SignInStartDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'signIn(parameters:)' instead.");
/// Reset the password using parameters
/// \param parameters Parameters used for the Reset Password flow.
///
/// \param delegate Delegate that receives callbacks for the Reset Password flow.
///
- (void)resetPasswordWithParameters:(MSALNativeAuthResetPasswordParameters * _Nonnull)parameters delegate:(id <ResetPasswordStartDelegate> _Nonnull)delegate;
/// Reset the password for a given username.
/// \param username Username for the account.
///
/// \param correlationId Optional. UUID to correlate this request with the server for debugging.
///
/// \param delegate Delegate that receives callbacks for the Reset Password flow.
///
- (void)resetPasswordWithUsername:(NSString * _Nonnull)username correlationId:(NSUUID * _Nullable)correlationId delegate:(id <ResetPasswordStartDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'resetPassword(parameters:)' instead.");
/// Retrieve the current signed in account from the cache.
/// \param correlationId Optional. UUID to correlate this request with the server for debugging.
///
///
/// returns:
/// An object representing the account information if present in the local cache.
- (MSALNativeAuthUserAccountResult * _Nullable)getNativeAuthUserAccountWithCorrelationId:(NSUUID * _Nullable)correlationId SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithConfiguration:(MSALPublicClientApplicationConfig * _Nonnull)config error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithClientId:(NSString * _Nonnull)clientId error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithClientId:(NSString * _Nonnull)clientId authority:(MSALAuthority * _Nullable)authority error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithClientId:(NSString * _Nonnull)clientId authority:(MSALAuthority * _Nullable)authority redirectUri:(NSString * _Nullable)redirectUri error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithClientId:(NSString * _Nonnull)clientId keychainGroup:(NSString * _Nullable)keychainGroup authority:(MSALAuthority * _Nullable)authority redirectUri:(NSString * _Nullable)redirectUri error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Class that defines the structure of a Required Attribute
SWIFT_CLASS("_TtC4MSAL31MSALNativeAuthRequiredAttribute")
@interface MSALNativeAuthRequiredAttribute : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encapsulates the parameters passed to the resetPassword method of MSALNativeAuthPublicClientApplication
SWIFT_CLASS("_TtC4MSAL37MSALNativeAuthResetPasswordParameters")
@interface MSALNativeAuthResetPasswordParameters : NSObject
/// username of the account to reset password.
@property (nonatomic, copy) NSString * _Nonnull username;
/// UUID to correlate this request with the server for debugging.
@property (nonatomic, copy) NSUUID * _Nullable correlationId;
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encapsulates the parameters passed to the signIn method after resetPassword
SWIFT_CLASS("_TtC4MSAL48MSALNativeAuthSignInAfterResetPasswordParameters")
@interface MSALNativeAuthSignInAfterResetPasswordParameters : NSObject
/// Permissions you want included in the access token received.
/// Not all scopes are guaranteed to be included in the access token returned.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable scopes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Encapsulates the parameters passed to the signIn method after signUp
SWIFT_CLASS("_TtC4MSAL41MSALNativeAuthSignInAfterSignUpParameters")
@interface MSALNativeAuthSignInAfterSignUpParameters : NSObject
/// Permissions you want included in the access token received.
/// Not all scopes are guaranteed to be included in the access token returned.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable scopes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MSALClaimsRequest;

/// Encapsulates the parameters passed to the signIn method of MSALNativeAuthPublicClientApplication
SWIFT_CLASS("_TtC4MSAL30MSALNativeAuthSignInParameters")
@interface MSALNativeAuthSignInParameters : NSObject
/// username of the account to sign in.
@property (nonatomic, copy) NSString * _Nonnull username;
/// password of the account to sign in.
@property (nonatomic, copy) NSString * _Nullable password;
/// Permissions you want included in the access token received.
/// Not all scopes are guaranteed to be included in the access token returned.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable scopes;
/// The claims parameter that needs to be sent to the service.
@property (nonatomic, strong) MSALClaimsRequest * _Nullable claimsRequest;
/// UUID to correlate this request with the server for debugging.
@property (nonatomic, copy) NSUUID * _Nullable correlationId;
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encapsulates the parameters passed to the signUp method of MSALNativeAuthPublicClientApplication
SWIFT_CLASS("_TtC4MSAL30MSALNativeAuthSignUpParameters")
@interface MSALNativeAuthSignUpParameters : NSObject
/// username of the account to sign up.
@property (nonatomic, copy) NSString * _Nonnull username;
/// password of the account to sign up.
@property (nonatomic, copy) NSString * _Nullable password;
/// user attributes to be used during account creation.
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable attributes;
/// UUID to correlate this request with the server for debugging.
@property (nonatomic, copy) NSUUID * _Nullable correlationId;
- (nonnull instancetype)initWithUsername:(NSString * _Nonnull)username OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSDate;

SWIFT_CLASS("_TtC4MSAL25MSALNativeAuthTokenResult")
@interface MSALNativeAuthTokenResult : NSObject
/// The Access Token requested.
/// Note that if access token is not returned in token response, this property will be returned as an empty string.
@property (nonatomic, readonly, copy) NSString * _Nonnull accessToken;
/// Get the list of permissions for the access token for the account.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull scopes;
/// Get the expiration date for the access token for the account.
/// This value is calculated based on current UTC time measured locally and the value expiresIn returned from the service
@property (nonatomic, readonly, copy) NSDate * _Nullable expiresOn;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MSALAccount;

/// Class that groups account and token information.
SWIFT_CLASS("_TtC4MSAL31MSALNativeAuthUserAccountResult")
@interface MSALNativeAuthUserAccountResult : NSObject
/// The account object that holds account information.
@property (nonatomic, strong) MSALAccount * _Nonnull account;
/// Get the latest ID token for the account.
@property (nonatomic, readonly, copy) NSString * _Nullable idToken;
/// Removes all the data from the cache.
- (void)signOut;
/// \param parameters Parameters used for the Get Access Token flow.
///
/// \param delegate Delegate that receives callbacks for the Get Access Token flow.
///
- (void)getAccessTokenWithParameters:(MSALNativeAuthGetAccessTokenParameters * _Nonnull)parameters delegate:(id <CredentialsDelegate> _Nonnull)delegate;
/// Retrieves the access token for the default OIDC(openid, offline_access, profile) scopes from the cache.
/// \param forceRefresh Optional. Ignore any existing access token in the cache and force MSAL to get a new access token from the service.
///
/// \param correlationId Optional. UUID to correlate this request with the server for debugging.
///
/// \param delegate Delegate that receives callbacks for the Get Access Token flow.
///
- (void)getAccessTokenWithForceRefresh:(BOOL)forceRefresh correlationId:(NSUUID * _Nullable)correlationId delegate:(id <CredentialsDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'getAccessToken(parameters:)' instead.");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Class that defines the structure and type of a PasswordRequired error
SWIFT_CLASS("_TtC4MSAL21PasswordRequiredError")
@interface PasswordRequiredError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> when the password is not valid.
@property (nonatomic, readonly) BOOL isInvalidPassword;
@end


/// Class that defines the structure and type of a ResendCode error
SWIFT_CLASS("_TtC4MSAL15ResendCodeError")
@interface ResendCodeError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@end


/// Base class for the ResetPassword state
SWIFT_CLASS("_TtC4MSAL22ResetPasswordBaseState")
@interface ResetPasswordBaseState : MSALNativeAuthBaseState
@end

@protocol ResetPasswordResendCodeDelegate;
@protocol ResetPasswordVerifyCodeDelegate;

/// An object of this type is created when a user is required to supply a verification code to continue a reset password flow.
SWIFT_CLASS("_TtC4MSAL30ResetPasswordCodeRequiredState")
@interface ResetPasswordCodeRequiredState : ResetPasswordBaseState
/// Requests the server to resend the verification code to the user.
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)resendCodeWithDelegate:(id <ResetPasswordResendCodeDelegate> _Nonnull)delegate;
/// Submits the code to the server for verification.
/// \param code Verification code that the user supplied.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitCodeWithCode:(NSString * _Nonnull)code delegate:(id <ResetPasswordVerifyCodeDelegate> _Nonnull)delegate;
@end


@class ResetPasswordRequiredState;
@class SignInAfterResetPasswordState;

/// Protocol that defines the methods of a ResetPasswordRequired delegate
SWIFT_PROTOCOL("_TtP4MSAL29ResetPasswordRequiredDelegate_")
@protocol ResetPasswordRequiredDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onResetPasswordRequiredErrorWithError:(PasswordRequiredError * _Nonnull)error newState:(ResetPasswordRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that the reset password operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onResetPasswordRequiredError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onResetPasswordCompletedWithNewState:(SignInAfterResetPasswordState * _Nonnull)newState;
@end


/// An object of this type is created when a user is required to supply a password to continue a reset password flow.
SWIFT_CLASS("_TtC4MSAL26ResetPasswordRequiredState")
@interface ResetPasswordRequiredState : ResetPasswordBaseState
/// Submits the password to the server for verification.
/// \param password Password that the user supplied.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitPasswordWithPassword:(NSString * _Nonnull)password delegate:(id <ResetPasswordRequiredDelegate> _Nonnull)delegate;
@end



/// Protocol that defines the methods of a ResetPasswordResendCode delegate
SWIFT_PROTOCOL("_TtP4MSAL31ResetPasswordResendCodeDelegate_")
@protocol ResetPasswordResendCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onResetPasswordResendCodeErrorWithError:(ResendCodeError * _Nonnull)error newState:(ResetPasswordCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onResetPasswordResendCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onResetPasswordResendCodeRequiredWithNewState:(ResetPasswordCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
@end

@class ResetPasswordStartError;

/// Protocol that defines the methods of a ResetPasswordStart delegate
SWIFT_PROTOCOL("_TtP4MSAL26ResetPasswordStartDelegate_")
@protocol ResetPasswordStartDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onResetPasswordStartErrorWithError:(ResetPasswordStartError * _Nonnull)error;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onResetPasswordStartError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onResetPasswordCodeRequiredWithNewState:(ResetPasswordCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
@end


/// Class that defines the structure and type of a ResetPasswordStart error
SWIFT_CLASS("_TtC4MSAL23ResetPasswordStartError")
@interface ResetPasswordStartError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> if the user does not have a password.
@property (nonatomic, readonly) BOOL isUserDoesNotHavePassword;
/// Returns <code>true</code> if the user that is trying to reset their password cannot be found.
@property (nonatomic, readonly) BOOL isUserNotFound;
/// Returns <code>true</code> when the username is not valid.
@property (nonatomic, readonly) BOOL isInvalidUsername;
@end

@class VerifyCodeError;

/// Protocol that defines the methods of a ResetPasswordVerifyCode delegate
SWIFT_PROTOCOL("_TtP4MSAL31ResetPasswordVerifyCodeDelegate_")
@protocol ResetPasswordVerifyCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onResetPasswordVerifyCodeErrorWithError:(VerifyCodeError * _Nonnull)error newState:(ResetPasswordCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a password is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onResetPasswordVerifyCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onPasswordRequiredWithNewState:(ResetPasswordRequiredState * _Nonnull)newState;
@end


/// Class that defines the structure and type of a RetrieveAccessToken error
SWIFT_CLASS("_TtC4MSAL24RetrieveAccessTokenError")
@interface RetrieveAccessTokenError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> if the refresh token has expired.
@property (nonatomic, readonly) BOOL isRefreshTokenExpired;
/// Returns <code>true</code> if the scope list is empty.
@property (nonatomic, readonly) BOOL isInvalidScope;
@end


/// Base class for the SignInAfterPreviousFlow state
SWIFT_CLASS("_TtC4MSAL32SignInAfterPreviousFlowBaseState")
@interface SignInAfterPreviousFlowBaseState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class SignInAfterResetPasswordError;

/// Protocol that defines the methods of a SignInAfterResetPassword delegate
SWIFT_PROTOCOL("_TtP4MSAL32SignInAfterResetPasswordDelegate_")
@protocol SignInAfterResetPasswordDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onSignInAfterResetPasswordErrorWithError:(SignInAfterResetPasswordError * _Nonnull)error;
@optional
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInAfterResetPasswordError(error:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end


/// Class that defines the structure and type of a SignInAfterResetPassword error
SWIFT_CLASS("_TtC4MSAL29SignInAfterResetPasswordError")
@interface SignInAfterResetPasswordError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@end


/// An object of this type is created when a user has reset their password successfully.
SWIFT_CLASS("_TtC4MSAL29SignInAfterResetPasswordState")
@interface SignInAfterResetPasswordState : SignInAfterPreviousFlowBaseState
/// Sign in the user that just reset the password.
/// \param parameters Parameters used to Sign In the user after the Reset Password flow.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInParameters:(MSALNativeAuthSignInAfterResetPasswordParameters * _Nonnull)parameters delegate:(id <SignInAfterResetPasswordDelegate> _Nonnull)delegate;
/// Sign in the user that just reset the password.
/// \param scopes Optional. Permissions you want included in the access token received after sign in flow has completed.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInScopes:(NSArray<NSString *> * _Nullable)scopes delegate:(id <SignInAfterResetPasswordDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'signIn(parameters:)' instead.");
@end

@class SignInAfterSignUpError;

/// Protocol that defines the methods of a SignInAfterSignUp delegate
SWIFT_PROTOCOL("_TtP4MSAL25SignInAfterSignUpDelegate_")
@protocol SignInAfterSignUpDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onSignInAfterSignUpErrorWithError:(SignInAfterSignUpError * _Nonnull)error;
@optional
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInAfterSignUpError(error:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end


/// Class that defines the structure and type of a SignInAfterSignUp error
SWIFT_CLASS("_TtC4MSAL22SignInAfterSignUpError")
@interface SignInAfterSignUpError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
@end


/// An object of this type is created when a user has signed up successfully.
SWIFT_CLASS("_TtC4MSAL22SignInAfterSignUpState")
@interface SignInAfterSignUpState : SignInAfterPreviousFlowBaseState
/// Sign in the user that signed up.
/// \param parameters Parameters used to Sign In the user after the Sign Up flow.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInParameters:(MSALNativeAuthSignInAfterSignUpParameters * _Nonnull)parameters delegate:(id <SignInAfterSignUpDelegate> _Nonnull)delegate;
/// Sign in the user that signed up.
/// \param scopes Optional. Permissions you want included in the access token received after sign in flow has completed.
///
/// \param delegate Delegate that receives callbacks for the Sign In flow.
///
- (void)signInScopes:(NSArray<NSString *> * _Nullable)scopes delegate:(id <SignInAfterSignUpDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("This method is now deprecated. Use the method 'signIn(parameters:)' instead.");
@end


/// Base class for the SignIn state
SWIFT_CLASS("_TtC4MSAL15SignInBaseState")
@interface SignInBaseState : MSALNativeAuthBaseState
@end

@protocol SignInResendCodeDelegate;
@protocol SignInVerifyCodeDelegate;

/// An object of this type is created when a user is required to supply a verification code to continue a sign in flow.
SWIFT_CLASS("_TtC4MSAL23SignInCodeRequiredState")
@interface SignInCodeRequiredState : SignInBaseState
/// Requests the server to resend the verification code to the user.
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)resendCodeWithDelegate:(id <SignInResendCodeDelegate> _Nonnull)delegate;
/// Submits the code to the server for verification.
/// \param code Verification code that the user supplies.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitCodeWithCode:(NSString * _Nonnull)code delegate:(id <SignInVerifyCodeDelegate> _Nonnull)delegate;
@end


@class SignInPasswordRequiredState;

/// Protocol that defines the methods of a SignInPasswordRequired delegate
SWIFT_PROTOCOL("_TtP4MSAL30SignInPasswordRequiredDelegate_")
@protocol SignInPasswordRequiredDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInPasswordRequiredErrorWithError:(PasswordRequiredError * _Nonnull)error newState:(SignInPasswordRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a multi factor authentication (MFA) is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInPasswordRequiredError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInAwaitingMFAWithNewState:(AwaitingMFAState * _Nonnull)newState;
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
///
/// If a flow requires this optional method and it is not implemented, then <code>onSignInPasswordRequiredError(error:newState:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end


/// An object of this type is created when a user is required to supply a password to continue a sign in flow.
SWIFT_CLASS("_TtC4MSAL27SignInPasswordRequiredState")
@interface SignInPasswordRequiredState : SignInBaseState
/// Submits the password to the server for verification.
/// \param password Password that the user supplied.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitPasswordWithPassword:(NSString * _Nonnull)password delegate:(id <SignInPasswordRequiredDelegate> _Nonnull)delegate;
@end



/// Protocol that defines the methods of a SignInResendCode delegate
SWIFT_PROTOCOL("_TtP4MSAL24SignInResendCodeDelegate_")
@protocol SignInResendCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInResendCodeErrorWithError:(ResendCodeError * _Nonnull)error newState:(SignInCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInResendCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onSignInResendCodeCodeRequiredWithNewState:(SignInCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
@end

@class SignInStartError;

/// Protocol that defines the methods of a SignInStart delegate
SWIFT_PROTOCOL("_TtP4MSAL19SignInStartDelegate_")
@protocol SignInStartDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onSignInStartErrorWithError:(SignInStartError * _Nonnull)error;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInStartError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onSignInCodeRequiredWithNewState:(SignInCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
/// Notifies the delegate that a password is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInStartError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInPasswordRequiredWithNewState:(SignInPasswordRequiredState * _Nonnull)newState;
/// Notifies the delegate that a multi factor authentication (MFA) is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInStartError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInAwaitingMFAWithNewState:(AwaitingMFAState * _Nonnull)newState;
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInStartError(error:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end


/// Class that defines the structure and type of a SignInStart error
SWIFT_CLASS("_TtC4MSAL16SignInStartError")
@interface SignInStartError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> if the user that is trying to sign in cannot be found.
@property (nonatomic, readonly) BOOL isUserNotFound;
/// Returns <code>true</code> when the credentials are not valid.
@property (nonatomic, readonly) BOOL isInvalidCredentials;
/// Returns <code>true</code> when the username is not valid.
@property (nonatomic, readonly) BOOL isInvalidUsername;
@end


/// Protocol that defines the methods of a SignInVerifyCode delegate
SWIFT_PROTOCOL("_TtP4MSAL24SignInVerifyCodeDelegate_")
@protocol SignInVerifyCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignInVerifyCodeErrorWithError:(VerifyCodeError * _Nonnull)error newState:(SignInCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that the sign in operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignInVerifyCodeError(error:newState:)</code> will be called.
/// \param result An object representing the signed in user account.
///
- (void)onSignInCompletedWithResult:(MSALNativeAuthUserAccountResult * _Nonnull)result;
@end

@class SignUpAttributesRequiredState;

/// Protocol that defines the methods of a SignUpAttributesRequired delegate
SWIFT_PROTOCOL("_TtP4MSAL32SignUpAttributesRequiredDelegate_")
@protocol SignUpAttributesRequiredDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onSignUpAttributesRequiredErrorWithError:(AttributesRequiredError * _Nonnull)error;
@optional
/// Notifies the delegate that there are some required attributes to be sent.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpAttributesRequiredError(error:)</code> will be called.
/// \param attributes List of required attributes.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpAttributesRequiredWithAttributes:(NSArray<MSALNativeAuthRequiredAttribute *> * _Nonnull)attributes newState:(SignUpAttributesRequiredState * _Nonnull)newState;
/// Notifies the delegate that invalid attributes were sent.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpAttributesRequiredError(error:)</code> will be called.
/// \param attributeNames List of attribute names that failed validation.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpAttributesInvalidWithAttributeNames:(NSArray<NSString *> * _Nonnull)attributeNames newState:(SignUpAttributesRequiredState * _Nonnull)newState;
/// Notifies the delegate that the sign up operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpAttributesRequiredError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpCompletedWithNewState:(SignInAfterSignUpState * _Nonnull)newState;
@end


/// Base class for the SignUp state
SWIFT_CLASS("_TtC4MSAL15SignUpBaseState")
@interface SignUpBaseState : MSALNativeAuthBaseState
@end


/// An object of this type is created when a user is required to supply attributes to continue a sign up flow.
SWIFT_CLASS("_TtC4MSAL29SignUpAttributesRequiredState")
@interface SignUpAttributesRequiredState : SignUpBaseState
/// Submits the attributes to the server for verification.
/// \param attributes Dictionary of attributes that the user supplied.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitAttributesWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes delegate:(id <SignUpAttributesRequiredDelegate> _Nonnull)delegate;
@end



@protocol SignUpResendCodeDelegate;
@protocol SignUpVerifyCodeDelegate;

/// An object of this type is created when a user is required to supply a verification code to continue a sign up flow.
SWIFT_CLASS("_TtC4MSAL23SignUpCodeRequiredState")
@interface SignUpCodeRequiredState : SignUpBaseState
/// Requests the server to resend the verification code to the user.
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)resendCodeWithDelegate:(id <SignUpResendCodeDelegate> _Nonnull)delegate;
/// Submits the code to the server for verification.
/// \param code Verification code that the user supplies.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitCodeWithCode:(NSString * _Nonnull)code delegate:(id <SignUpVerifyCodeDelegate> _Nonnull)delegate;
@end


@class SignUpPasswordRequiredState;

/// Protocol that defines the methods of a SignUpPasswordRequired delegate
SWIFT_PROTOCOL("_TtP4MSAL30SignUpPasswordRequiredDelegate_")
@protocol SignUpPasswordRequiredDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpPasswordRequiredErrorWithError:(PasswordRequiredError * _Nonnull)error newState:(SignUpPasswordRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that attributes are required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpPasswordRequiredError(error:newState:)</code> will be called.
/// \param attributes List of required attributes.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpAttributesRequiredWithAttributes:(NSArray<MSALNativeAuthRequiredAttribute *> * _Nonnull)attributes newState:(SignUpAttributesRequiredState * _Nonnull)newState;
/// Notifies the delegate that the sign up operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpPasswordRequiredError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpCompletedWithNewState:(SignInAfterSignUpState * _Nonnull)newState;
@end


/// An object of this type is created when a user is required to supply a password to continue a sign up flow.
SWIFT_CLASS("_TtC4MSAL27SignUpPasswordRequiredState")
@interface SignUpPasswordRequiredState : SignUpBaseState
/// Submits the password to the server for verification.
/// \param password Password that the user supplied.
///
/// \param delegate Delegate that receives callbacks for the operation.
///
- (void)submitPasswordWithPassword:(NSString * _Nonnull)password delegate:(id <SignUpPasswordRequiredDelegate> _Nonnull)delegate;
@end



/// Protocol that defines the methods of a SignUpResendCode delegate
SWIFT_PROTOCOL("_TtP4MSAL24SignUpResendCodeDelegate_")
@protocol SignUpResendCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpResendCodeErrorWithError:(ResendCodeError * _Nonnull)error newState:(SignUpCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpResendCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onSignUpResendCodeCodeRequiredWithNewState:(SignUpCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
@end

@class SignUpStartError;

/// Protocol that defines the methods of a SignUpStart delegate
SWIFT_PROTOCOL("_TtP4MSAL19SignUpStartDelegate_")
@protocol SignUpStartDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
- (void)onSignUpStartErrorWithError:(SignUpStartError * _Nonnull)error;
@optional
/// Notifies the delegate that a verification code is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpStartError(error:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
/// \param sentTo The email/phone number that the code was sent to.
///
/// \param channelTargetType The channel (email/phone) the code was sent through.
///
/// \param codeLength The length of the code required.
///
- (void)onSignUpCodeRequiredWithNewState:(SignUpCodeRequiredState * _Nonnull)newState sentTo:(NSString * _Nonnull)sentTo channelTargetType:(MSALNativeAuthChannelType * _Nonnull)channelTargetType codeLength:(NSInteger)codeLength;
/// Notifies the delegate that invalid attributes were sent.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpStartError(error:)</code> will be called.
/// \param attributeNames List of attribute names that failed validation.
///
- (void)onSignUpAttributesInvalidWithAttributeNames:(NSArray<NSString *> * _Nonnull)attributeNames;
@end


/// Class that defines the structure and type of a SignUpStart error
SWIFT_CLASS("_TtC4MSAL16SignUpStartError")
@interface SignUpStartError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> when the user is trying to register an existing username.
@property (nonatomic, readonly) BOOL isUserAlreadyExists;
/// Returns <code>true</code> when the password is not valid.
@property (nonatomic, readonly) BOOL isInvalidPassword;
/// Returns <code>true</code> when the username is not valid.
@property (nonatomic, readonly) BOOL isInvalidUsername;
@end


/// Protocol that defines the methods of a SignUpVerifyCode delegate
SWIFT_PROTOCOL("_TtP4MSAL24SignUpVerifyCodeDelegate_")
@protocol SignUpVerifyCodeDelegate
/// Notifies the delegate that the operation resulted in an error.
/// \param error An error object indicating why the operation failed.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpVerifyCodeErrorWithError:(VerifyCodeError * _Nonnull)error newState:(SignUpCodeRequiredState * _Nullable)newState;
@optional
/// Notifies the delegate that attributes are required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpVerifyCodeError(error:newState:)</code> will be called.
/// \param attributes List of required attributes.
///
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpAttributesRequiredWithAttributes:(NSArray<MSALNativeAuthRequiredAttribute *> * _Nonnull)attributes newState:(SignUpAttributesRequiredState * _Nonnull)newState;
/// Notifies the delegate that a password is required from the user to continue.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpVerifyCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpPasswordRequiredWithNewState:(SignUpPasswordRequiredState * _Nonnull)newState;
/// Notifies the delegate that the sign up operation completed successfully.
/// note:
/// If a flow requires this optional method and it is not implemented, then <code>onSignUpVerifyCodeError(error:newState:)</code> will be called.
/// \param newState An object representing the new state of the flow with follow on methods.
///
- (void)onSignUpCompletedWithNewState:(SignInAfterSignUpState * _Nonnull)newState;
@end


/// Class that defines the structure and type of a VerifyCode error
SWIFT_CLASS("_TtC4MSAL15VerifyCodeError")
@interface VerifyCodeError : MSALNativeAuthError
/// Describes why an error occurred and provides more information about the error.
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
/// Returns <code>true</code> if a browser is required to continue the operation.
@property (nonatomic, readonly) BOOL isBrowserRequired;
/// Returns <code>true</code> when the code introduced is not valid.
@property (nonatomic, readonly) BOOL isInvalidCode;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
